/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lab02.hunter.group4.a1;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import java.util.*;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class Menu {
    private boolean isAdmin;
    public JsonManagement jsonManager;
    Scanner scanner;

    public Menu() {
        isAdmin = false; // Default to non-admin user
        jsonManager = new JsonManagement();
        scanner = new Scanner(System.in);

    }

    public void only_display_categories(String menuPath) {
        HashMap<String, JSONArray> menuInfo = jsonManager.getMenuInfo(menuPath);
        System.out.println("The Menu Available Categories:");
        menuInfo.keySet().forEach(System.out::println);

    }
    public void display_categories (String menuPath) {
        HashMap<String, JSONArray> menuInfo = jsonManager.getMenuInfo(menuPath);
        System.out.println("----------------------------");
        System.out.println("Available Categories:");
        menuInfo.keySet().forEach(System.out::println);

        System.out.print("Enter the category you want to see: ");
        String category = scanner.nextLine();
        // error checking
        if (!menuInfo.containsKey(category)) {
            System.out.println("The category does not exist");
            return;
        }
        display_detail(menuInfo.get(category));
    }

    public void display_detail (List < Map < String, Object >> itemsList){
        System.out.println("Items in the selected category:");
        for (Map<String, Object> item : itemsList) {
            System.out.println("Name: " + item.get("name"));
            System.out.println("Description: " + item.get("description"));
            System.out.println("Price: " + item.get("price"));
            System.out.println("----------------------------");
        }
    }

    public void Gstart() {
        boolean continueFunctions = true;
        while (continueFunctions) {

            System.out.println("1. Only view Menu Categories");

            System.out.println("2. View Menu detail");

            System.out.println("3. Exit");

            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character
            switch (choice) {
                case 1:
                    System.out.println("----------------------------");
                    only_display_categories(jsonManager.MENU_FILE);
                    System.out.println("----------------------------");
                    System.out.println("Other choices:");
                    break;
                
                case 2:
                    display_categories(jsonManager.MENU_FILE);
                    System.out.println("Other choices:");
                
                case 3:
                    System.out.println("Exiting...");

                    // scanner.close();
                    continueFunctions = false;

                
                default:
                    System.out.println("Invalid choice. Please enter a valid option.");
            }


        }
    }


    //menuAdmin

    public void addMenuItem (String category, String itemName, String description,double price, String menuPath) {
        // Get the current menu information
        JSONObject menu = (JSONObject) jsonManager.readJson(menuPath);

        // Create a new item
        JSONObject newItem = new JSONObject();
        newItem.put("name", itemName);
        newItem.put("description", description);
        newItem.put("price", String.valueOf(price));

        // Check if the item already exists in the category
        if (menu.containsKey(category)) {
            JSONArray categoryItems = (JSONArray) menu.get(category);

            for (int i = 0; i < categoryItems.size(); i++) {
                JSONObject existingItem = (JSONObject) categoryItems.get(i);
                if (existingItem.get("name").equals(itemName)) {
                    System.out.println("The item already exists in the category");
                    return;
                }
            }

            // If the item doesn't exist, add it to the category
            categoryItems.add(newItem);
        } else {
            // If the category doesn't exist, create it
            JSONArray newCategory = new JSONArray();
            newCategory.add(newItem);
            menu.put(category, newCategory);
        }

        // Write the updated menu back to the file
        jsonManager.updateJSON(menuPath, menu);
    }
    public void update_existing_item (String category, String itemName, String newDescription,double newPrice, String menuPath){
        // Get the current menu information
        JSONObject menu = (JSONObject) jsonManager.readJson(menuPath);

        // Check if the category exists
        if (menu.containsKey(category)) {
            JSONArray categoryItems = (JSONArray) menu.get(category);
            boolean itemExists = false;

            // Look for the item in the category
            for (Object o : categoryItems) {
                JSONObject item = (JSONObject) o;
                if (item.get("name").equals(itemName)) {
                    // Update the item
                    item.put("description", newDescription);
                    item.put("price", String.valueOf(newPrice));
                    itemExists = true;
                    break;
                }
            }

            if (!itemExists) {
                System.out.println("The item does not exist in the category");
                return;
            }
        } else {
            System.out.println("The category does not exist");
            return;
        }

        // Write the updated menu back to the file
        jsonManager.updateJSON(menuPath, menu);
    }


    public void remove_outdated_item (String category, String itemName, String menuPath){
        // Get the current menu information
        JSONObject menu = (JSONObject) jsonManager.readJson(menuPath);

        // Check if the category exists
        if (menu.containsKey(category)) {
            JSONArray categoryItems = (JSONArray) menu.get(category);
            boolean itemExists = false;

            // Look for the item in the category
            for (Object o : categoryItems) {
                JSONObject item = (JSONObject) o;
                if (item.get("name").equals(itemName)) {
                    // Remove the item
                    categoryItems.remove(item);
                    itemExists = true;
                    break;
                }
            }

            if (!itemExists) {
                System.out.println("The item does not exist in the category");
                return;
            }
        } else {
            System.out.println("The category does not exist");
            return;
        }

        // Write the updated menu back to the file
        jsonManager.updateJSON(menuPath, menu);
    }

    public void edit_category (String oldCategoryName, String newCategoryName, String menuPath){
        // Get the current menu information
        JSONObject menu = (JSONObject) jsonManager.readJson(menuPath);

        // Check if the old category exists
        if (menu.containsKey(oldCategoryName)) {
            // Get the items in the old category
            JSONArray categoryItems = (JSONArray) menu.get(oldCategoryName);

            // Remove the old category
            menu.remove(oldCategoryName);

            // Add the items to the new category
            menu.put(newCategoryName, categoryItems);
        } else {
            System.out.println("The category does not exist");
            return;
        }

        // Write the updated menu back to the file
        jsonManager.updateJSON(menuPath, menu);
    }

    public void Astart (String menuPath) {
        boolean continueAdminFunctions = true;
        while (continueAdminFunctions) {

            System.out.println("Please choose a function to execute:");
            System.out.println("1. Add a menu item");
            System.out.println("2. Update an existing item");
            System.out.println("3. Remove an outdated item");
            System.out.println("4. Edit a category");
            System.out.println("5. Exit admin functions");


            String functionChoice = scanner.nextLine();


            switch (functionChoice) {
                case "1":
                    System.out.println("Enter category, item name, description and price (separated by comma): ");
                    String[] newItemData = scanner.nextLine().split(",");
                    addMenuItem(newItemData[0].trim(), newItemData[1].trim(), newItemData[2].trim(), Double.parseDouble(newItemData[3].trim()), menuPath);
                    break;
                case "2":

                    System.out.println("Enter category, item name, new description and new price (separated by comma): ");
                    String[] updateItemData = scanner.nextLine().split(",");
                    update_existing_item(updateItemData[0].trim(), updateItemData[1].trim(), updateItemData[2].trim(), Double.parseDouble(updateItemData[3].trim()), menuPath);
                    break;
                case "3":

                    System.out.println("Enter category and item name (separated by comma): ");
                    String[] removeItemData = scanner.nextLine().split(",");
                    remove_outdated_item(removeItemData[0].trim(), removeItemData[1].trim(), menuPath);
                    break;
                case "4":

                    System.out.println("Enter old category name and new category name (separated by comma): ");
                    String[] editCategoryData = scanner.nextLine().split(",");
                    edit_category(editCategoryData[0].trim(), editCategoryData[1].trim(), menuPath);
                    break;
                case "5":
                    continueAdminFunctions = false;
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
            }
        }
    }
}
