{% extends 'base.jinja' %}

{% block content %} 
   <style>
    nav {
        border-bottom: 1px solid black;
        overflow: auto
    }

    #message_box {
        border: 1px solid black; 
        height: 400px; 
        width: 800px; 
        overflow: auto;
        padding: 2px;
    }

    .text  {
        margin-top: 2px;
        margin-bottom: 2px;
    }
    </style>
{% include 'heading.jinja' %}

<h1>Messaging with {{ friend_username }}</h1>

<div id="message_box"></div>

<div id="chat_box">
<p  class="text">Chat with: </p>
<input id="receiver" placeholder="user" value="{{ friend_username }}" readonly>
<button onclick="join_room()">Join Chat Room</button>
</div>

<div id="input_box" style="display: none" >
<p class="text">Message: </p>
<input id="message" placeholder="message">
<button onclick="send()">Send</button>
<button onclick="leave()">Leave Room</button>
</div>

<script src="/static/js/libs/socket.io.min.js"></script>
<script>
    let room_id = 0;


    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

     $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })

    $(document).ready(() => {
        
        if (Cookies.get("room_id") == undefined) {
            return;
        }
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })
    
    let username = "{{ username }}";

    Cookies.set('username', username);

    const socket = io();
      socket.on("incoming", (msg, color="black") => {
        add_message(msg, color);
      })
      
    function send() {
        let message = $("#message").val();
        $("#message").val("");
        socket.emit("send", username, message, room_id);  
    } 

    function join_room() {
       
        let receiver = $("#receiver").val();

        socket.emit("join", username, receiver, (res) => {
            if (typeof res != "number") {
                alert(res);
                return;
            }
            room_id = res;
            Cookies.set("room_id", room_id);
            $("#chat_box").hide();
            $("#input_box").show();
        });
     
    }

    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
    }

    function add_message(message, color) {
        let box = $("#message_box");
        if (color != "green") {
            message = decrypt(message, username);
        }
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }
    
    const crypto = require("crypto");
    const fs = require("fs");
    function decrypt(data, username) {
        let privKey = fs.readFileSync("key/${username}_sk.pem",  { encoding: "utf-8" });
        let decrypted = crypto.privateDecrypt(
            {
                key: privKey,
                padding: crypto.constants.RSA_PKCS1_OAEP_PADDING,
                oaepHash: "sha256",
            },
            data
        );
        const decryptedStr = decrypted.toString("utf-8");
        console.log("Decrypted message:", decryptedStr);
        return decrypted.toString("utf-8");
    }
 

</script>
{% endblock %}
